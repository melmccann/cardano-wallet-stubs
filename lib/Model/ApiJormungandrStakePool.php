<?php
/**
 * ApiJormungandrStakePool
 *
 * PHP version 5
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Cardano Wallet Backend API
 *
 * <p align=\"right\"><img style=\"position: relative; top: -10em; margin-bottom: -12em;\" width=\"20%\" src=\"https://cardanodocs.com/img/cardano.png\"></img></p>
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 4.3.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * ApiJormungandrStakePool Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class ApiJormungandrStakePool implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'ApiJormungandrStakePool';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'string',
        'metrics' => '\OpenAPI\Client\Model\ApiJormungandrStakePoolMetrics',
        'apparent_performance' => 'float',
        'cost' => '\OpenAPI\Client\Model\ApiStakePoolCost',
        'margin' => '\OpenAPI\Client\Model\ApiStakePoolMargin',
        'metadata' => '\OpenAPI\Client\Model\ApiStakePoolMetadata',
        'saturation' => 'float',
        'desirability' => 'float'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPIFormats = [
        'id' => 'hex',
        'metrics' => null,
        'apparent_performance' => null,
        'cost' => null,
        'margin' => null,
        'metadata' => null,
        'saturation' => null,
        'desirability' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'metrics' => 'metrics',
        'apparent_performance' => 'apparent_performance',
        'cost' => 'cost',
        'margin' => 'margin',
        'metadata' => 'metadata',
        'saturation' => 'saturation',
        'desirability' => 'desirability'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'metrics' => 'setMetrics',
        'apparent_performance' => 'setApparentPerformance',
        'cost' => 'setCost',
        'margin' => 'setMargin',
        'metadata' => 'setMetadata',
        'saturation' => 'setSaturation',
        'desirability' => 'setDesirability'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'metrics' => 'getMetrics',
        'apparent_performance' => 'getApparentPerformance',
        'cost' => 'getCost',
        'margin' => 'getMargin',
        'metadata' => 'getMetadata',
        'saturation' => 'getSaturation',
        'desirability' => 'getDesirability'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['metrics'] = isset($data['metrics']) ? $data['metrics'] : null;
        $this->container['apparent_performance'] = isset($data['apparent_performance']) ? $data['apparent_performance'] : null;
        $this->container['cost'] = isset($data['cost']) ? $data['cost'] : null;
        $this->container['margin'] = isset($data['margin']) ? $data['margin'] : null;
        $this->container['metadata'] = isset($data['metadata']) ? $data['metadata'] : null;
        $this->container['saturation'] = isset($data['saturation']) ? $data['saturation'] : null;
        $this->container['desirability'] = isset($data['desirability']) ? $data['desirability'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['id'] === null) {
            $invalidProperties[] = "'id' can't be null";
        }
        if ((mb_strlen($this->container['id']) > 64)) {
            $invalidProperties[] = "invalid value for 'id', the character length must be smaller than or equal to 64.";
        }

        if ((mb_strlen($this->container['id']) < 64)) {
            $invalidProperties[] = "invalid value for 'id', the character length must be bigger than or equal to 64.";
        }

        if ($this->container['metrics'] === null) {
            $invalidProperties[] = "'metrics' can't be null";
        }
        if ($this->container['apparent_performance'] === null) {
            $invalidProperties[] = "'apparent_performance' can't be null";
        }
        if (($this->container['apparent_performance'] < 0)) {
            $invalidProperties[] = "invalid value for 'apparent_performance', must be bigger than or equal to 0.";
        }

        if ($this->container['cost'] === null) {
            $invalidProperties[] = "'cost' can't be null";
        }
        if ($this->container['margin'] === null) {
            $invalidProperties[] = "'margin' can't be null";
        }
        if ($this->container['saturation'] === null) {
            $invalidProperties[] = "'saturation' can't be null";
        }
        if (($this->container['saturation'] < 0)) {
            $invalidProperties[] = "invalid value for 'saturation', must be bigger than or equal to 0.";
        }

        if ($this->container['desirability'] === null) {
            $invalidProperties[] = "'desirability' can't be null";
        }
        if (($this->container['desirability'] < 0)) {
            $invalidProperties[] = "invalid value for 'desirability', must be bigger than or equal to 0.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return string
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string $id A unique identifier for the pool.
     *
     * @return $this
     */
    public function setId($id)
    {
        if ((mb_strlen($id) > 64)) {
            throw new \InvalidArgumentException('invalid length for $id when calling ApiJormungandrStakePool., must be smaller than or equal to 64.');
        }
        if ((mb_strlen($id) < 64)) {
            throw new \InvalidArgumentException('invalid length for $id when calling ApiJormungandrStakePool., must be bigger than or equal to 64.');
        }

        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets metrics
     *
     * @return \OpenAPI\Client\Model\ApiJormungandrStakePoolMetrics
     */
    public function getMetrics()
    {
        return $this->container['metrics'];
    }

    /**
     * Sets metrics
     *
     * @param \OpenAPI\Client\Model\ApiJormungandrStakePoolMetrics $metrics metrics
     *
     * @return $this
     */
    public function setMetrics($metrics)
    {
        $this->container['metrics'] = $metrics;

        return $this;
    }

    /**
     * Gets apparent_performance
     *
     * @return float
     */
    public function getApparentPerformance()
    {
        return $this->container['apparent_performance'];
    }

    /**
     * Sets apparent_performance
     *
     * @param float $apparent_performance Apparent performance of the stake pool over past epochs. This indicator is computed using data available to the server. In particular, the server can't reliably know the stake distribution of past epochs without being during those epochs. The performance are therefore an average measure that is more accurate for servers that are online often.  The performance is a float with double-precision which is _typically_ within `0` and `1`:    - `0` means that a pool is not performing well.   - `1` means that a pool is performing _as expected_.   - above `1` means the pool is performing beyond expectations.  Pools that are lucky enough to win most of their slots early in the epoch will tend to look like they're over-performing for a while. Having a wallet regularly connected to the network would harmonize the performance and give better results.
     *
     * @return $this
     */
    public function setApparentPerformance($apparent_performance)
    {

        if (($apparent_performance < 0)) {
            throw new \InvalidArgumentException('invalid value for $apparent_performance when calling ApiJormungandrStakePool., must be bigger than or equal to 0.');
        }

        $this->container['apparent_performance'] = $apparent_performance;

        return $this;
    }

    /**
     * Gets cost
     *
     * @return \OpenAPI\Client\Model\ApiStakePoolCost
     */
    public function getCost()
    {
        return $this->container['cost'];
    }

    /**
     * Sets cost
     *
     * @param \OpenAPI\Client\Model\ApiStakePoolCost $cost cost
     *
     * @return $this
     */
    public function setCost($cost)
    {
        $this->container['cost'] = $cost;

        return $this;
    }

    /**
     * Gets margin
     *
     * @return \OpenAPI\Client\Model\ApiStakePoolMargin
     */
    public function getMargin()
    {
        return $this->container['margin'];
    }

    /**
     * Sets margin
     *
     * @param \OpenAPI\Client\Model\ApiStakePoolMargin $margin margin
     *
     * @return $this
     */
    public function setMargin($margin)
    {
        $this->container['margin'] = $margin;

        return $this;
    }

    /**
     * Gets metadata
     *
     * @return \OpenAPI\Client\Model\ApiStakePoolMetadata|null
     */
    public function getMetadata()
    {
        return $this->container['metadata'];
    }

    /**
     * Sets metadata
     *
     * @param \OpenAPI\Client\Model\ApiStakePoolMetadata|null $metadata metadata
     *
     * @return $this
     */
    public function setMetadata($metadata)
    {
        $this->container['metadata'] = $metadata;

        return $this;
    }

    /**
     * Gets saturation
     *
     * @return float
     */
    public function getSaturation()
    {
        return $this->container['saturation'];
    }

    /**
     * Sets saturation
     *
     * @param float $saturation Saturation-level of the pool based on the desired number of pools aimed by the network. A value above `1` indicates that the pool is saturated.
     *
     * @return $this
     */
    public function setSaturation($saturation)
    {

        if (($saturation < 0)) {
            throw new \InvalidArgumentException('invalid value for $saturation when calling ApiJormungandrStakePool., must be bigger than or equal to 0.');
        }

        $this->container['saturation'] = $saturation;

        return $this;
    }

    /**
     * Gets desirability
     *
     * @return float
     */
    public function getDesirability()
    {
        return $this->container['desirability'];
    }

    /**
     * Sets desirability
     *
     * @param float $desirability How desirable / attractive a pool is. To determine a pool's _rank_, we order pools by decreasing desirability. The most desirable pool gets rank 1, the second most desirable pool gets rank 2 and so on.
     *
     * @return $this
     */
    public function setDesirability($desirability)
    {

        if (($desirability < 0)) {
            throw new \InvalidArgumentException('invalid value for $desirability when calling ApiJormungandrStakePool., must be bigger than or equal to 0.');
        }

        $this->container['desirability'] = $desirability;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


