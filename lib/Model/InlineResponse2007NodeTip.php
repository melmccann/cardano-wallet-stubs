<?php
/**
 * InlineResponse2007NodeTip
 *
 * PHP version 5
 *
 * @category Class
 * @package  melmccann\cardanowallet
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Cardano Wallet Backend API
 *
 * <p align=\"right\"><img style=\"position: relative; top: -10em; margin-bottom: -12em;\" width=\"20%\" src=\"https://cardanodocs.com/img/cardano.png\"></img></p>
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 4.3.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace melmccann\cardanowallet\Model;

use \ArrayAccess;
use \melmccann\cardanowallet\ObjectSerializer;

/**
 * InlineResponse2007NodeTip Class Doc Comment
 *
 * @category Class
 * @description Underlying node&#39;s tip
 * @package  melmccann\cardanowallet
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class InlineResponse2007NodeTip implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'inline_response_200_7_node_tip';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'slot_number' => 'int',
        'epoch_number' => 'int',
        'height' => '\melmccann\cardanowallet\Model\WalletsTipHeight'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPIFormats = [
        'slot_number' => null,
        'epoch_number' => null,
        'height' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'slot_number' => 'slot_number',
        'epoch_number' => 'epoch_number',
        'height' => 'height'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'slot_number' => 'setSlotNumber',
        'epoch_number' => 'setEpochNumber',
        'height' => 'setHeight'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'slot_number' => 'getSlotNumber',
        'epoch_number' => 'getEpochNumber',
        'height' => 'getHeight'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['slot_number'] = isset($data['slot_number']) ? $data['slot_number'] : null;
        $this->container['epoch_number'] = isset($data['epoch_number']) ? $data['epoch_number'] : null;
        $this->container['height'] = isset($data['height']) ? $data['height'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['slot_number'] === null) {
            $invalidProperties[] = "'slot_number' can't be null";
        }
        if (($this->container['slot_number'] < 0)) {
            $invalidProperties[] = "invalid value for 'slot_number', must be bigger than or equal to 0.";
        }

        if ($this->container['epoch_number'] === null) {
            $invalidProperties[] = "'epoch_number' can't be null";
        }
        if (($this->container['epoch_number'] < 0)) {
            $invalidProperties[] = "invalid value for 'epoch_number', must be bigger than or equal to 0.";
        }

        if ($this->container['height'] === null) {
            $invalidProperties[] = "'height' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets slot_number
     *
     * @return int
     */
    public function getSlotNumber()
    {
        return $this->container['slot_number'];
    }

    /**
     * Sets slot_number
     *
     * @param int $slot_number slot_number
     *
     * @return $this
     */
    public function setSlotNumber($slot_number)
    {

        if (($slot_number < 0)) {
            throw new \InvalidArgumentException('invalid value for $slot_number when calling InlineResponse2007NodeTip., must be bigger than or equal to 0.');
        }

        $this->container['slot_number'] = $slot_number;

        return $this;
    }

    /**
     * Gets epoch_number
     *
     * @return int
     */
    public function getEpochNumber()
    {
        return $this->container['epoch_number'];
    }

    /**
     * Sets epoch_number
     *
     * @param int $epoch_number epoch_number
     *
     * @return $this
     */
    public function setEpochNumber($epoch_number)
    {

        if (($epoch_number < 0)) {
            throw new \InvalidArgumentException('invalid value for $epoch_number when calling InlineResponse2007NodeTip., must be bigger than or equal to 0.');
        }

        $this->container['epoch_number'] = $epoch_number;

        return $this;
    }

    /**
     * Gets height
     *
     * @return \melmccann\cardanowallet\Model\WalletsTipHeight
     */
    public function getHeight()
    {
        return $this->container['height'];
    }

    /**
     * Sets height
     *
     * @param \melmccann\cardanowallet\Model\WalletsTipHeight $height height
     *
     * @return $this
     */
    public function setHeight($height)
    {
        $this->container['height'] = $height;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


