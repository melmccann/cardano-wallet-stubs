<?php
/**
 * ApiByronWalletRandomXPrvPostData
 *
 * PHP version 5
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Cardano Wallet Backend API
 *
 * <p align=\"right\"><img style=\"position: relative; top: -10em; margin-bottom: -12em;\" width=\"20%\" src=\"https://cardanodocs.com/img/cardano.png\"></img></p>
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 4.3.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * ApiByronWalletRandomXPrvPostData Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class ApiByronWalletRandomXPrvPostData implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'ApiByronWalletRandomXPrvPostData';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'style' => 'string',
        'name' => 'string',
        'encrypted_root_private_key' => 'string',
        'passphrase_hash' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPIFormats = [
        'style' => null,
        'name' => null,
        'encrypted_root_private_key' => 'hex',
        'passphrase_hash' => 'hex'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'style' => 'style',
        'name' => 'name',
        'encrypted_root_private_key' => 'encrypted_root_private_key',
        'passphrase_hash' => 'passphrase_hash'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'style' => 'setStyle',
        'name' => 'setName',
        'encrypted_root_private_key' => 'setEncryptedRootPrivateKey',
        'passphrase_hash' => 'setPassphraseHash'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'style' => 'getStyle',
        'name' => 'getName',
        'encrypted_root_private_key' => 'getEncryptedRootPrivateKey',
        'passphrase_hash' => 'getPassphraseHash'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    const STYLE_RANDOM = 'random';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getStyleAllowableValues()
    {
        return [
            self::STYLE_RANDOM,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['style'] = isset($data['style']) ? $data['style'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['encrypted_root_private_key'] = isset($data['encrypted_root_private_key']) ? $data['encrypted_root_private_key'] : null;
        $this->container['passphrase_hash'] = isset($data['passphrase_hash']) ? $data['passphrase_hash'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getStyleAllowableValues();
        if (!is_null($this->container['style']) && !in_array($this->container['style'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'style', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['name'] === null) {
            $invalidProperties[] = "'name' can't be null";
        }
        if ((mb_strlen($this->container['name']) > 255)) {
            $invalidProperties[] = "invalid value for 'name', the character length must be smaller than or equal to 255.";
        }

        if ((mb_strlen($this->container['name']) < 1)) {
            $invalidProperties[] = "invalid value for 'name', the character length must be bigger than or equal to 1.";
        }

        if ($this->container['encrypted_root_private_key'] === null) {
            $invalidProperties[] = "'encrypted_root_private_key' can't be null";
        }
        if ((mb_strlen($this->container['encrypted_root_private_key']) > 256)) {
            $invalidProperties[] = "invalid value for 'encrypted_root_private_key', the character length must be smaller than or equal to 256.";
        }

        if ((mb_strlen($this->container['encrypted_root_private_key']) < 256)) {
            $invalidProperties[] = "invalid value for 'encrypted_root_private_key', the character length must be bigger than or equal to 256.";
        }

        if ($this->container['passphrase_hash'] === null) {
            $invalidProperties[] = "'passphrase_hash' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets style
     *
     * @return string|null
     */
    public function getStyle()
    {
        return $this->container['style'];
    }

    /**
     * Sets style
     *
     * @param string|null $style style
     *
     * @return $this
     */
    public function setStyle($style)
    {
        $allowedValues = $this->getStyleAllowableValues();
        if (!is_null($style) && !in_array($style, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'style', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['style'] = $style;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name name
     *
     * @return $this
     */
    public function setName($name)
    {
        if ((mb_strlen($name) > 255)) {
            throw new \InvalidArgumentException('invalid length for $name when calling ApiByronWalletRandomXPrvPostData., must be smaller than or equal to 255.');
        }
        if ((mb_strlen($name) < 1)) {
            throw new \InvalidArgumentException('invalid length for $name when calling ApiByronWalletRandomXPrvPostData., must be bigger than or equal to 1.');
        }

        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets encrypted_root_private_key
     *
     * @return string
     */
    public function getEncryptedRootPrivateKey()
    {
        return $this->container['encrypted_root_private_key'];
    }

    /**
     * Sets encrypted_root_private_key
     *
     * @param string $encrypted_root_private_key A root private key, encrypted using a given passphrase. The underlying key should contain: - A private key - A chain code - A public key
     *
     * @return $this
     */
    public function setEncryptedRootPrivateKey($encrypted_root_private_key)
    {
        if ((mb_strlen($encrypted_root_private_key) > 256)) {
            throw new \InvalidArgumentException('invalid length for $encrypted_root_private_key when calling ApiByronWalletRandomXPrvPostData., must be smaller than or equal to 256.');
        }
        if ((mb_strlen($encrypted_root_private_key) < 256)) {
            throw new \InvalidArgumentException('invalid length for $encrypted_root_private_key when calling ApiByronWalletRandomXPrvPostData., must be bigger than or equal to 256.');
        }

        $this->container['encrypted_root_private_key'] = $encrypted_root_private_key;

        return $this;
    }

    /**
     * Gets passphrase_hash
     *
     * @return string
     */
    public function getPassphraseHash()
    {
        return $this->container['passphrase_hash'];
    }

    /**
     * Sets passphrase_hash
     *
     * @param string $passphrase_hash A hash of master passphrase. The hash should be an output of a Scrypt function with the following parameters: - logN = 14 - r = 8 - p = 1
     *
     * @return $this
     */
    public function setPassphraseHash($passphrase_hash)
    {
        $this->container['passphrase_hash'] = $passphrase_hash;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


